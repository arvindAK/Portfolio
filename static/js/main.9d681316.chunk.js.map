{"version":3,"sources":["components/Hero.js","components/Card.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["Hero","react_default","a","createElement","className","href","Card","props","Fragment","type","projects","map","proj","index","key","title","src","img","alt","description","link","About","App","components_Hero","id","components_About","components_Card","fullstackProjects","reactProjects","treehouseProjects","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d681316.chunk.js","sourcesContent":["import React from 'react';\n\nconst Hero = () => (\n  <div className=\"hero-bg\">\n    <ul>\n      <li><a href=\"#portfolio\">Portfolio</a></li>\n      <li><a href=\"#about\">About Me</a></li>\n    </ul>\n\n    <div className=\"hero-text\">\n      <h1>Hello, I am Arvind!</h1>\n      <h3>Wellcome to my portfolio!</h3>\n      <a href=\"#portfolio\">View Portfolio</a>\n    </div>\n    <div className=\"ball\"/>\n    <div className=\"ball2\"/>\n    <div className=\"ball3\"/>\n  </div>\n)\n\nexport default Hero\n","import React from 'react';\n\nconst Card = (props) => (\n  <React.Fragment>\n    <h3>{props.type} Projects</h3>\n    <div className=\"container\">\n    {props.projects.map((proj, index) => {\n      return (\n      <div className=\"card\" key={proj.title}>\n        <img src={proj.img} alt={proj.title} />\n        <div className=\"card-text\">\n            <h2 className=\"project-title\">{proj.title}</h2>\n            <p>{proj.description}</p>\n            <a href={proj.link} className=\"button\">Visit Project</a>\n        </div>\n      </div>\n      )})}\n    </div>\n  </React.Fragment>\n);\n\nexport default Card\n","import React from 'react';\n\nconst About = () => (\n  <div>\n    <div>\n      <h2>About Me</h2>\n      <div className=\"aboutMeContainer\">\n        <div className=\"intro\">\n          <p>What fascinates me about programing and where I see potential is the filtering of data to allow for users to interactively explore datasets.\n          <br/>A quote that brought home this idea for me is:</p>\n          <blockquote>\n             \"In ancient times having power meant having access to data. Today having power means knowing what to ignore.\"\n          </blockquote>\n          <span className=\"quote_author\">Yuval Noah Harar - Homo Deus: A Brief History of Tomorrow</span>\n        </div>\n        <img className=\"profile\" src=\"img/me.png\" alt=\"profile\"/>\n        <div className=\"hobbies\">\n          <h3>Interests</h3>\n          <ul>\n            <li className=\"print\">3D Printing\n              <div className=\"printer\">\n                <div className=\"printerFrame\"></div>\n                <div className=\"printerHead\"></div>\n              </div>\n            </li>\n            <li className=\"cycle\">Cycling\n              <div className=\"bike\" >\n                <div className=\"frame\"></div>\n                <div className=\"fwheel\"></div>\n                <div className=\"bwheel\"></div>\n              </div>\n            </li>\n            <li className=\"garden\">Gardening\n              <div className=\"gardener\">\n                <div className=\"stem\"></div>\n                <div className=\"leaf1\"></div>\n                <div className=\"leaf2\"></div>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default About;\n","import React, { Component } from 'react';\nimport Hero from './components/Hero';\nimport Card from './components/Card';\nimport About from './components/About';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Hero />\n        <section id=\"about\">\n          <About />\n        </section>\n        <section id=\"portfolio\">\n          <h2>Portfolio</h2>\n          <Card projects={fullstackProjects} type={\"Full Stack\"} />\n          <Card projects={reactProjects} type={\"React\"} />\n          <Card projects={treehouseProjects} type={\"Treehouse\"} />\n        </section>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nconst reactProjects = [\n  {title: \"Recipe App\",\n  description: \"Uses the Food2Fork API to look up recipes containing an ingredient.\",\n  link: \"https://arvindak.github.io/recipe-app/\",\n  img: \"img/react/recipe-app.png\"\n  },\n\n  {title: \"Weather App\",\n  description: \"Uses a Weather API to fetch look up recipes containing an ingredient.\",\n  link: \"https://arvindak.github.io/weather-app/\",\n  img: \"img/react/weather-app.png\"\n  },\n\n  {title: \"Todo App\",\n  description: \"Track tasks and save them to the local browsers cache\",\n  link: \"https://arvindak.github.io/Todo-App/\",\n  img: \"img/react/todo-app.png\"\n  }\n]\n\nconst treehouseProjects = [\n  {title: \"Pagination and dynamic filtering\",\n  description: \"Dynamicly search and filter a dataset of students.\",\n  link: \"https://arvindak.github.io/THFS-Project2_Pagination/#\",\n  img: \"img/treehouse/filter.png\"\n  },\n\n  {title: \"Form validation\",\n  description: \"Using client side validation that provides real timeout feedback to the user.\",\n  link: \"https://arvindak.github.io/THFS-Project3_InteractiveForm/#\",\n  img: \"img/treehouse/form.png\"\n  },\n\n  {title: \"API Awesome Employee Fetching\",\n  description: \"Fetch 12 users from an API, display them in cards, using modals to inspect each card.\",\n  link: \"https://arvindak.github.io/THFS-Project5-API/#\",\n  img: \"img/treehouse/api.png\"\n  }\n];\n\nconst fullstackProjects = [\n  {title: \"Amazon Prime Movie Filter\",\n  description: \"Filter Amazon Prime movies via IMDB, Amazon star rating, number of ratings, genre and year\",\n  link: \"https://morning-crag-36301.herokuapp.com/#\",\n  img: \"img/fullStack/movieFilter.png\"\n  }\n]\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}